# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: grafana-service-accounts
spec:
  bindings:
    - name: NAMESPACE
      value: ($namespace)
    - name: USER
      value: root
    - name: PASS
      value: secret
    - name: NOW
      value: (time_now())
    - name: INSTANCENAME
      value: grafana1
    - name: SANAME
      value: sa1

  steps:
    - name: Create a service account before Grafana
      try:
      - apply: { file: 010-precreate-sa.yaml }
      - assert: { file: 010-assert.yaml }

    - name: Create Grafana instance
      try:
      - apply: { file: 020-deploy-grafana.yaml }
      - assert: { file: 020-assert.yaml }

    - name: Precreated service account is reconciled
      try:
      - script: &reconcileSA1
          # Trigger reconciliation
          content: >
              kubectl annotate -n $NS grafanaserviceaccount grafana1-sa1 reconcile-trigger="$(date +%s)" --overwrite
          env:
            - name: NS
              value: ($NAMESPACE)
          check:
            ($error == null): true
      - assert: { file: 030-assert.yaml }
      - script: &fetchSAs
          # Check the current state of Grafana via API.
          content: >
              kubectl exec -n $NS $DEPLOYMENT -- \
                curl --fail --silent --show-error -u $USER:$PASS \
                "http://localhost:3000/api/serviceaccounts/search"
          env:
            - name: USER
              value: ($USER)
            - name: PASS
              value: ($PASS)
            - name: NS
              value: ($NAMESPACE)
            - name: DEPLOYMENT
              value: deployment/grafana1-deployment
          outputs:
            - name: serviceaccounts
              value: (json_parse($stdout))
          check:
            ($error == null): true
      - assert: { file: 030-assert-api-response.yaml }

    - name: Create a new service account without tokens
      try:
      - apply: { file: 040-sa-no-tokens.yaml }
      - assert: { file: 040-assert.yaml }
      - script: *fetchSAs
      - assert: { file: 040-assert-api-response.yaml }

    - name: Reconcile service account after external modification
      try:
      - script:
          # Manually modify the service account through Grafana API to simulate external changes.
          content: >
              kubectl exec -n $NS $DEPLOYMENT -- \
                curl --fail --silent --show-error -X PATCH -u $USER:$PASS \
                -H "Accept: application/json" -H "Content-Type: application/json" -d '{"name": "test", "role": "Viewer", "isDisabled": true}' \
                "http://localhost:3000/api/serviceaccounts/3"
          env:
            - name: USER
              value: ($USER)
            - name: PASS
              value: ($PASS)
            - name: NS
              value: ($NAMESPACE)
            - name: DEPLOYMENT
              value: deployment/grafana1-deployment
          outputs:
            - name: serviceaccount
              value: (json_parse($stdout))
          check:
            ($error == null): true
      - script: &reconcileSA2
          # Trigger reconciliation
          content: >
              kubectl annotate -n $NS grafanaserviceaccount grafana1-sa2 reconcile-trigger="$(date +%s)" --overwrite
          env:
            - name: NS
              value: ($NAMESPACE)
          check:
            ($error == null): true
      - script:
          # Wait for the operator to restore the original state after manual changes.
          content: >
            scripts/wait-sa.sh 3 5s 1s '{"name": "sa2", "role": "Editor", "isDisabled": false}'
          env:
            - name: USER
              value: ($USER)
            - name: PASS
              value: ($PASS)
            - name: NS
              value: ($NAMESPACE)
            - name: DEPLOYMENT
              value: deployment/grafana1-deployment
          check:
            ($error == null): true
      - assert: { file: 040-assert.yaml }
      - script: *fetchSAs
      - assert: { file: 040-assert-api-response.yaml }

    - name: Disable the service account
      try:
      - patch: { file: 050-disable-sa.yaml }
      - assert: { file: 050-assert.yaml }
      - script: *fetchSAs
      - assert: { file: 050-assert-api-response.yaml }

    - name: Enable the service account
      try:
      - patch: { file: 060-enable-sa.yaml }
      - assert: { file: 060-assert.yaml }
      - script: *fetchSAs
      - assert: { file: 060-assert-api-response.yaml }

    - name: Change the role of the service account
      try:
      - patch: { file: 070-change-role.yaml }
      - assert: { file: 070-assert.yaml }
      - script: *fetchSAs
      - assert: { file: 070-assert-api-response.yaml }

    - name: Check suspending reconciliation
      try:
      # Suspend reconciliation
      - patch: { file: 080-suspend-sa.yaml }
      - assert: { file: 080-assert-suspension.yaml }
      # Modify suspended service account (changes should not apply)
      - patch: { file: 080-modify-suspended-sa.yaml }
      - assert: { file: 080-assert-nochanges.yaml }
      - script: *fetchSAs
      - assert: { file: 080-assert-api-response-nochanges.yaml }
      # Resume reconciliation
      - patch: { file: 080-resume-sa.yaml }
      - assert: { file: 080-assert.yaml }
      - script: *fetchSAs
      - assert: { file: 080-assert-api-response.yaml }

    - name: Add multiple tokens to service account
      try:
      - patch: { file: 090-add-tokens.yaml }
      - assert: { file: 090-assert.yaml }
      - script: *fetchSAs
      - assert: { file: 090-assert-api-response.yaml }

    - name: Rename token secret
      try:
      - apply: { file: 100-rename-token-secret.yaml }
      - script: *reconcileSA2
      - wait:
          apiVersion: v1
          kind: Secret
          name: ccc
          namespace: ($NAMESPACE)
          for:
            deletion: {}
      - assert: { file: 100-assert.yaml }
      - script: *fetchSAs
      - assert: { file: 100-assert-api-response.yaml }

    - name: Updating token expirations triggers reconciliation
      try:
      - patch: { file: 110-update-expirations.yaml }
      - assert:
          resource:
            # Chainsaw cannot correctly compare nil and list in assertions.
            # Workaround: wait for generation update, which guarantees changes are applied.
            apiVersion: grafana.integreatly.org/v1beta1
            kind: GrafanaServiceAccount
            metadata:
              name: grafana1-sa2
              namespace: ($NAMESPACE)
            status:
              conditions:
                - observedGeneration: 10
      - assert: { file: 110-assert.yaml }
      - script: *fetchSAs
      - assert: { file: 110-assert-api-response.yaml }

    - name: Remove token expirations
      try:
      - apply: { file: 120-remove-expirations.yaml }
      - assert: { file: 120-assert.yaml }
      - script: *fetchSAs
      - assert: { file: 120-assert-api-response.yaml }

    - name: Delete token secret and verify restoration
      try:
      - delete:
          ref:
            apiVersion: v1
            kind: Secret
            name: eee
            namespace: ($NAMESPACE)
      - wait:
          apiVersion: v1
          kind: Secret
          name: eee
          namespace: ($NAMESPACE)
          for:
            deletion: {}
      - script: *reconcileSA2
      - assert: { file: 130-assert.yaml }
      - script: *fetchSAs
      - assert: { file: 130-assert-api-response.yaml }

    - name: Delete token externally and verify restoration
      try:
      - script:
          # Delete token through Grafana API to simulate external deletion
          content: >
              kubectl exec -n $NS $DEPLOYMENT -- \
                curl --fail --silent --show-error -X DELETE -u $USER:$PASS \
                "http://localhost:3000/api/serviceaccounts/3/tokens/7"
          env:
            - name: USER
              value: ($USER)
            - name: PASS
              value: ($PASS)
            - name: NS
              value: ($NAMESPACE)
            - name: DEPLOYMENT
              value: deployment/grafana1-deployment
          check:
            ($error == null): true
      - script:
          content: >
            scripts/wait-token-deletion.sh 3 7 5s 1s
          env:
            - name: USER
              value: ($USER)
            - name: PASS
              value: ($PASS)
            - name: NS
              value: ($NAMESPACE)
            - name: DEPLOYMENT
              value: deployment/grafana1-deployment
          check:
            ($error == null): true
      - script: *reconcileSA2
      - assert: { file: 140-assert.yaml }
      - script: *fetchSAs
      - assert: { file: 140-assert-api-response.yaml }

    - name: Delete service account externally and verify restoration
      try:
      - script:
          # Delete service account through Grafana API to simulate external deletion
          content: >
              kubectl exec -n $NS $DEPLOYMENT -- \
                curl --fail --silent --show-error -X DELETE -u $USER:$PASS \
                "http://localhost:3000/api/serviceaccounts/3"
          env:
            - name: USER
              value: ($USER)
            - name: PASS
              value: ($PASS)
            - name: NS
              value: ($NAMESPACE)
            - name: DEPLOYMENT
              value: deployment/grafana1-deployment
          check:
            ($error == null): true
      - script:
          # Wait for service account to be deleted from Grafana
          content: >
            scripts/wait-sa-deletion.sh 3 5s 1s
          env:
            - name: USER
              value: ($USER)
            - name: PASS
              value: ($PASS)
            - name: NS
              value: ($NAMESPACE)
            - name: DEPLOYMENT
              value: deployment/grafana1-deployment
          check:
            ($error == null): true
      - script: *reconcileSA2
      - script:
          # Wait for the operator to restore the original state after manual changes.
          content: >
            scripts/wait-sa.sh 4 5s 1s '{"name": "sa2", "role": "Viewer", "isDisabled": false}'
          env:
            - name: USER
              value: ($USER)
            - name: PASS
              value: ($PASS)
            - name: NS
              value: ($NAMESPACE)
            - name: DEPLOYMENT
              value: deployment/grafana1-deployment
          check:
            ($error == null): true
      - assert: { file: 150-assert.yaml }
      - script: *fetchSAs
      - assert: { file: 150-assert-api-response.yaml }

    - name: Delete service account and ensure cleanup
      try:
      - delete:
          ref:
            apiVersion: grafana.integreatly.org/v1beta1
            kind: GrafanaServiceAccount
            name: grafana1-sa2
      - wait:
          apiVersion: v1
          kind: Secret
          selector: grafana.integreatly.org/service-account-name=grafana1-sa2
          namespace: ($NAMESPACE)
          for:
            deletion: {}
      - wait:
          apiVersion: grafana.integreatly.org/v1beta1
          kind: GrafanaServiceAccount
          name: grafana1-sa2
          namespace: ($NAMESPACE)
          for:
            deletion: {}
      - script:
          # Wait for service account to be deleted from Grafana
          content: >
            scripts/wait-sa-deletion.sh 3 5s 1s
          env:
            - name: USER
              value: ($USER)
            - name: PASS
              value: ($PASS)
            - name: NS
              value: ($NAMESPACE)
            - name: DEPLOYMENT
              value: deployment/grafana1-deployment
          check:
            ($error == null): true
      - script: *fetchSAs
      - assert: { file: 160-assert-api-response.yaml }

    - name: Delete Grafana before service account
      try:
      - delete:
          ref:
            apiVersion: grafana.integreatly.org/v1beta1
            kind: Grafana
            namespace: ($NAMESPACE)
      - wait:
          apiVersion: grafana.integreatly.org/v1beta1
          kind: Grafana
          name: grafana1
          namespace: ($NAMESPACE)
          for:
            deletion: {}
      - wait:
          apiVersion: apps/v1
          kind: Deployment
          name: grafana1-deployment
          namespace: ($NAMESPACE)
          for:
            deletion: {}
      - script: *reconcileSA1
      - assert: { file: 170-assert.yaml }

    - name: Delete precreated service account
      try:
      - delete:
          ref:
            apiVersion: grafana.integreatly.org/v1beta1
            kind: GrafanaServiceAccount
            name: grafana1-sa1
      - wait:
          apiVersion: v1
          kind: Secret
          selector: grafana.integreatly.org/service-account-name=grafana1-sa1
          namespace: ($NAMESPACE)
          for:
            deletion: {}
      - wait:
          apiVersion: grafana.integreatly.org/v1beta1
          kind: GrafanaServiceAccount
          name: grafana1-sa1
          namespace: ($NAMESPACE)
          for:
            deletion: {}
