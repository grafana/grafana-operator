# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: grafana-service-accounts
spec:
  bindings:
    - name: NAMESPACE
      value: ($namespace)
    - name: USER
      value: root
    - name: PASS
      value: secret
    - name: NOW
      value: (time_now())
    - name: INSTANCENAME
      value: grafana1
    - name: SANAME
      value: sa1
  steps:
    - name: Create Grafana instance and Service Account
      try:
        - apply: {file: 010-deploy-grafana.yaml}
        - assert: {file: 010-assert.yaml}
        - apply: {file: 020-create-sa.yaml}
        - assert: {file: 020-assert.yaml}
    - name: Create a new service account without tokens
      try:
        - apply: {file: 040-sa-no-tokens.yaml}
        - assert: {file: 040-assert.yaml}
    - name: Reconcile service account after external modification
      try:
        - script:
            # Manually modify the service account through Grafana API to simulate external changes.
            content: >
              kubectl exec -n $NS $DEPLOYMENT -- \
                curl --fail --silent --show-error -X PATCH -u $USER:$PASS \
                -H "Accept: application/json" \
                -H "Content-Type: application/json" \
                -d '{"name": "test", "role": "Viewer", "isDisabled": true}' \
                "http://localhost:3000/api/serviceaccounts/3"
            env:
              - name: USER
                value: ($USER)
              - name: PASS
                value: ($PASS)
              - name: NS
                value: ($NAMESPACE)
              - name: DEPLOYMENT
                value: deployment/grafana1-deployment
            outputs:
              - name: serviceaccount
                value: (json_parse($stdout))
            check:
              ($error == null): true
        - script: &reconcileSA2
            # Trigger reconciliation
            content: >
              kubectl annotate -n $NS grafanaserviceaccount grafana1-sa2 reconcile-trigger="$(date +%s)" --overwrite

            env:
              - name: NS
                value: ($NAMESPACE)
            check:
              ($error == null): true
        - script:
            # Wait for the operator to restore the original state after manual changes.
            content: >
              scripts/wait-sa.sh 3 5s 1s '{"name": "sa2", "role": "Editor", "isDisabled": false}'

            env:
              - name: USER
                value: ($USER)
              - name: PASS
                value: ($PASS)
              - name: NS
                value: ($NAMESPACE)
              - name: DEPLOYMENT
                value: deployment/grafana1-deployment
            check:
              ($error == null): true
        - assert: {file: 040-assert.yaml}
    - name: Disable the service account
      try:
        - patch: {file: 050-disable-sa.yaml}
        - assert: {file: 050-assert.yaml}
    - name: Enable the service account
      try:
        - patch: {file: 060-enable-sa.yaml}
        - assert: {file: 060-assert.yaml}
    - name: Change the role of the service account
      try:
        - patch: {file: 070-change-role.yaml}
        - assert: {file: 070-assert.yaml}
    - name: Add multiple tokens to service account
      try:
        - patch: {file: 090-add-tokens.yaml}
        - assert: {file: 090-assert.yaml}
    - name: Rename token secret
      try:
        - apply: {file: 100-rename-token-secret.yaml}
        - script: *reconcileSA2
        - wait:
            apiVersion: v1
            kind: Secret
            name: ccc
            namespace: ($NAMESPACE)
            for:
              deletion: {}
        - assert: {file: 100-assert.yaml}
    - name: Updating token expirations triggers reconciliation
      try:
        - patch: {file: 110-update-expirations.yaml}
        - assert:
            resource:
              # Chainsaw cannot correctly compare nil and list in assertions.
              # Workaround: wait for generation update, which guarantees changes are applied.
              apiVersion: grafana.integreatly.org/v1beta1
              kind: GrafanaServiceAccount
              metadata:
                name: grafana1-sa2
                namespace: ($NAMESPACE)
              status:
                conditions:
                  - observedGeneration: 7
        - assert: {file: 110-assert.yaml}
    - name: Remove token expirations
      try:
        - apply: {file: 120-remove-expirations.yaml}
        - assert: {file: 120-assert.yaml}
    - name: Delete token secret and verify restoration
      try:
        - delete:
            ref:
              apiVersion: v1
              kind: Secret
              name: eee
              namespace: ($NAMESPACE)
        - wait:
            apiVersion: v1
            kind: Secret
            name: eee
            namespace: ($NAMESPACE)
            for:
              deletion: {}
        - script: *reconcileSA2
        - assert: {file: 130-assert.yaml}
    - name: Delete token externally and verify restoration
      try:
        - script:
            # Delete token through Grafana API to simulate external deletion
            content: >
              kubectl exec -n $NS $DEPLOYMENT -- \
                curl --fail --silent --show-error -X DELETE -u $USER:$PASS \
                "http://localhost:3000/api/serviceaccounts/3/tokens/7"
            env:
              - name: USER
                value: ($USER)
              - name: PASS
                value: ($PASS)
              - name: NS
                value: ($NAMESPACE)
              - name: DEPLOYMENT
                value: deployment/grafana1-deployment
            check:
              ($error == null): true
        - script:
            content: >
              scripts/wait-token-deletion.sh 3 7 5s 1s

            env:
              - name: USER
                value: ($USER)
              - name: PASS
                value: ($PASS)
              - name: NS
                value: ($NAMESPACE)
              - name: DEPLOYMENT
                value: deployment/grafana1-deployment
            check:
              ($error == null): true
        - script: *reconcileSA2
        - assert: {file: 140-assert.yaml}
